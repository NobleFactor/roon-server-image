#!/bin/bash

# TODO (DANOBLE) Complete copyright notice and reference SPDX document that references MIT and Roon software terms and conditions

#################################################
# Copyright
# SPDX Document reference
#################################################

set -o errexit -o nounset

###########
# Variables
###########

declare -r script_root="$(cd "$(dirname "$0")" && pwd)"
declare -r script_name="$(basename "$0")"

###########
# Functions
###########

function usage {
    echo ""
    echo "NAME"
    echo "       ${script_name} - Uninstalls Roon Server"
    echo ""
    echo "SYNOPSIS"
    echo "       ${script_name} [--remove-data] [--help]"
    echo ""
    echo "DESCRIPTION"
    echo "       ${script_name} requires root privileges. Use the --remove-data option if you wish to remove Roon's data"
    echo "       directory. Roon's backup and music directories are never touched."
    echo ""
    echo "OPTIONS"
    echo "       -h|--help"
    echo "           Prints this usage text and exits."
    echo ""
    echo "       --remove-data"
    echo "           Removes Roon's data directory. Roon's backup and music directories are never touched. Use this option"
    echo "           with discretion."
    echo ""
    exit 0
}

function cleanup_after_installation_error {
    systemctl stop "$roon_server_name" 2>&1 > /dev/null | true
    rm -rf \
        "$roon_apps_location" \
        "$roon_data_location" \
        "$roon_service_path" \
        "/etc/systemd/system/${roon_service_name}"
}

function error {
    local exit_code=$1 && shift 1
    echo "[$(date --iso-8601=seconds)] ${script_name} error: $@" 1>&2
    exit $exit_code
}

function note {
    echo "[$(date --iso-8601=seconds)] ${script_name} note: $@" 1>&2
}

###################
# Prerequsite check
###################

if [[ $EUID -ne 0 ]]; then
    error 1 "Must run as root."
fi

declare arch=$(uname -m)

if [[ $arch != x86_64 ]]; then
    error 1 "Requires x86_64, not $arch."
fi

if ! which systemctl >/dev/null; then
    error 1 "Requires systemctl on PATH."
fi

if ! systemctl list-unit-files roonserver.service >/dev/null; then
    error 1 "Roon Server is not installed."
fi

###########
# Arguments
###########

declare -r args=$(getopt --name "$script_name" --options "h" --longoptions "help,remove-data:" -- $* || echo exit)
eval set -- "$args"

while [[ $1 != '--' ]]; do
    case $1 in
    -h|--help)
        usage; # does not return
        shift 1
        ;;
    --remove-data)
        declare -r remove_data=true
        shift 1
        ;;
   *)
        error 1 "Unrecognized option: $1"
        ;;
  esac

done

######
# Main
######

eval declare -A roon_environment=$(echo "( $(systemctl show roonserver --property Environment | cut -f2- -d= | sed 's/ROON_\([^ \t]*\)=/[ROON_\1]=/g') )")

declare -r roon_server_root="${roon_environment[ROON_SERVER_ROOT]}"

if [[ -z $roon_server_root ]] || [[ ! -d $roon_server_root ]]; then
    error 1 \
        "Excepted the name of a directory for ROON_SERVER_ROOT, not '$roon_server_root'. (1) Correct the value of 'Environment=ROON_SERVER_ROOT' in" \
        "/etc/systemd/system/roonserver.service; (2) Issue this command: sudo systemctl daemon-reload. (3) Then try running ${script_name} again."
fi

declare -r roon_dataroot=${roon_environment[ROON_DATAROOT]}

if [[ -z $roon_dataroot ]] ||  [[ ! -d $roon_dataroot ]]; then
    error 1 \
        "Excepted the name of a directory for ROON_DATAROOT, not '$roon_dataroot'. (1) Correct the value of 'Environment=ROON_DATAROOT' in" \
        "/etc/systemd/system/roonserver.service; (2) Issue this command: sudo systemctl daemon-reload. (3) Then try running ${script_name} again."
fi

if [[ -f "${roon_server_root}/check.sh" ]] && "${roon_server_root}/check.sh"; then

    note "Uninstalling Roon Server at '${roon_server_root}'"
    
    systemctl stop roonserver
    rm --recursive --dir "${roon_server_root}"
    rm $(readlink --canonicalize-existing /etc/systemd/system/roonserver.service) /etc/systemd/system/roonserver.service

    if [[ remove_data == true ]]; then
        note "Removing Roon data at '${roon_dataroot}'"
        rm --recursive --dir "${roon_dataroot}"
    fi
    
    note "Complete."
else
    error 1 \
        "The check for a runnable instance of Roon Server at '$roon_server_root' failed. To resolve the issue, check" \
        "the values of the Roon Server environment variables by running this command: sudo systemctl show roonserver" \
        "--propert=Environment. Troubleshoot from there."
fi
